import requests
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode, ReplyKeyboardMarkup, KeyboardButton
from aiogram import executor
import requests
from weather_service import get_weather

API_TOKEN = "YOUR TELEGRAM BOT API KEY"
DJANGO_SERVER_URL = "http://127.0.0.1:8000/"


logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
button_weather = KeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É")
keyboard.add(button_weather)


@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É'.",
        reply_markup=keyboard,
    )


@dp.message_handler(lambda message: message.text == "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É")
async def get_weather_info(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")


@dp.message_handler(
    lambda message: message.text.lower() not in ["—É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É", "/start"]
)
async def process_city(message: types.Message):
    city_name = message.text
    weather_info = get_weather(city_name)

    if "error" in weather_info:
        await message.answer(f"–û—à–∏–±–∫–∞: {weather_info['error']}")
    else:
        response_text = (
            f"üåá –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {weather_info['city_name']}:\n "
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_info['temperature']}¬∞C\n "
            f"ü§ø –î–∞–≤–ª–µ–Ω–∏–µ: {weather_info['pressure_mm']} –º–º —Ä—Ç. —Å—Ç.\n "
            f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {weather_info['wind_speed']} –º/c"
        )
        await message.answer(response_text, parse_mode=ParseMode.MARKDOWN)


def is_django_server_running():
    try:
        response = requests.get(DJANGO_SERVER_URL)
        return response.status_code == 200
    except requests.ConnectionError:
        return False


if is_django_server_running():
    logging.info("Django server is running. Starting the bot.")
    executor.start_polling(dp, skip_updates=True)
else:
    logging.error("Django server is not running. Start the Django server first.")
